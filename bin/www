'use strict';

const app = require('../app');
const debug = require('debug')('missing-person-search:server');
const http = require('http');
//dotenvを呼び出し、.envファイルの環境変数がprocess.envで呼び出せるようになる。
require('dotenv').config();

//PORTは本番環境のポート番号。本番環境が設定されていない場合、開発環境のポート番号3000がデフォルト値として設定されている。
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const logger = require('../logger');
logger.setLogger();

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      //エラー処理ミドルウェア使うならここは書き換える必要あるかも
      logger.error(bind + ' requires elevated privileges');
      //プロセスを強制終了させている。（正常終了=0ではないので、OSに1を通知している。）
      process.exit(1);
      break;
    case 'EADDRINUSE':
      //エラー処理ミドルウェア使うならここは書き換える必要あるかも
      logger.error(bind + ' is already in use');
      //プロセスを強制終了させている。（正常終了=0ではないので、OSに1を通知している。）
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
